# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on: [push]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/tmparks/cpp
    strategy:
      matrix:
        build: [Release, Debug]   # Build type
        std: [11, 14, 17, 20, 23] # C++ standard

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake ${{matrix.build}} ${{matrix.std}}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build
        -DCMAKE_BUILD_TYPE=${{matrix.build}}
        -DCMAKE_CXX_STANDARD=${{matrix.std}}

    - name: Build ${{matrix.build}} ${{matrix.std}}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - name: Test $${matrix.build}} ${{matrix.std}}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        cd ${{github.workspace}}/build
        ctest
