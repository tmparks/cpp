# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

stages:          # List of stages for jobs, and their order of execution
  - .pre
  - build
  - test
  - deploy

variables:
  IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  LATEST: ${CI_REGISTRY_IMAGE}:latest

default:
  image: $IMAGE

pre-job:         # This job runs in the .pre stage, wich runs first.
  stage: .pre
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull $LATEST || true
    - docker build --tag $IMAGE --cache-from $LATEST .
    - docker push $IMAGE

build-job:       # This job runs in the build stage.
  stage: build
  script:
    - cmake -S . -B build
    - make --directory=build all

# See (Test Coverage Examples)[https://docs.gitlab.com/ee/ci/pipelines/settings.html#test-coverage-examples]
unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  artifacts:
    when: always
    paths:
      - build/results/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/results/coverage.xml
      junit: build/results/test_details.xml
  coverage: /TOTAL.*\s+(\d+)%/
  script:
    - cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build
    - make --directory=build all test coverage

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build
    - make --directory=build all

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull $IMAGE
    - docker tag $IMAGE $LATEST
    - docker push $LATEST
