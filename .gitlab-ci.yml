---
# Pipeline executes for default branch or when started from the web interface.
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

stages:
  - .pre
  - build
  - test
  - deploy

variables:
  IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  LATEST: ${CI_REGISTRY_IMAGE}:latest

default:
  image: $IMAGE

build-image:
  stage: .pre
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build --tag $IMAGE --cache-from $IMAGE --cache-to type=inline .
    - docker push $IMAGE

.build:
  stage: build
  variables:
    CXXFLAGS: -Werror
  script:
    - cmake $CMAKE_OPTIONS -S . -B build
    - make --directory=build all

build-11:
  extends: .build
  variables:
    CMAKE_OPTIONS: -DCMAKE_CXX_STANDARD=11

build-14:
  extends: .build
  variables:
    CMAKE_OPTIONS: -DCMAKE_CXX_STANDARD=14

build-17:
  extends: .build
  variables:
    CMAKE_OPTIONS: -DCMAKE_CXX_STANDARD=17

build-20:
  extends: .build
  variables:
    CMAKE_OPTIONS: -DCMAKE_CXX_STANDARD=20

build-23:
  extends: .build
  variables:
    CMAKE_OPTIONS: -DCMAKE_CXX_STANDARD=23

# See [Test Coverage Examples](https://docs.gitlab.com/ee/ci/pipelines/settings.html#test-coverage-examples)
unit-test-debug:
  stage: test
  artifacts:
    when: always
    paths:
      - build/results/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/results/coverage.xml
      junit: build/results/test_detail.xml
  coverage: /TOTAL.*\s+(\d+)%/
  script:
    - cat /proc/cpuinfo
    - cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build
    - make --directory=build all test coverage
    - /usr/bin/time --verbose valgrind build/TestRunner
    - make --directory=build coverage

unit-test-release:
  stage: test
  artifacts:
    when: always
    paths:
      - build/results/
    reports:
      junit: build/results/test_detail.xml
  coverage: /TOTAL.*\s+(\d+)%/
  script:
    - cat /proc/cpuinfo
    - cmake -DCMAKE_BUILD_TYPE=Release -S . -B build
    - make --directory=build all
    - /usr/bin/time --verbose valgrind build/TestRunner

lint-test:
  stage: test
  script:
    - cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build
    - make --directory=build check

latest:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull $IMAGE
    - docker tag $IMAGE $LATEST
    - docker push $LATEST
    
pages:
  stage: deploy
  dependencies:
    - unit-test-debug
  artifacts:
    paths:
      - public/
  script:
    - mv build/results/ public/
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# [Enable Code Quality](https://docs.gitlab.com/ee/ci/testing/code_quality.html#enable-code-quality)
# [Configure SAST in your CI/CD YAML](https://docs.gitlab.com/ee/user/application_security/sast/#configure-sast-in-your-cicd-yaml)
include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml

...
